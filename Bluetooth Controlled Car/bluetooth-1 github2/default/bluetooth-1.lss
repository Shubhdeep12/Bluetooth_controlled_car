
bluetooth-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002e5  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000183  00000000  00000000  000004d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002d4  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b9  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000240  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<util/delay.h>
void send(char send);
void ini();
char rec(void);
void main()
{
  92:	1f 93       	push	r17
int x=0;
DDRC=0Xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20



void ini()
{
  UBRRL=51;
  98:	13 e3       	ldi	r17, 0x33	; 51
 UBRRH=0;
 UCSRB=0x18;
  9a:	b8 e1       	ldi	r27, 0x18	; 24
 UCSRC=0x8e;
  9c:	ae e8       	ldi	r26, 0x8E	; 142
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	29 e1       	ldi	r18, 0x19	; 25
  a0:	30 e0       	ldi	r19, 0x00	; 0
PORTC=0B00001001;
_delay_ms(1000);
}
else if(a[x]=='R')
{
PORTC=0B00000110;
  a2:	76 e0       	ldi	r23, 0x06	; 6
PORTC=0B00001010;
_delay_ms(1000);
}
else if(a[x]=='L')
{
PORTC=0B00001001;
  a4:	69 e0       	ldi	r22, 0x09	; 9
PORTC=0B00000101;
_delay_ms(1000);
}
else if(a[x]=='B')
{
PORTC=0B00001010;
  a6:	5a e0       	ldi	r21, 0x0A	; 10
char a[11]={'R','B','F','L','S'};
ini();
a[x]=rec();
if(a[x]=='F')
{
PORTC=0B00000101;
  a8:	45 e0       	ldi	r20, 0x05	; 5



void ini()
{
  UBRRL=51;
  aa:	19 b9       	out	0x09, r17	; 9
 UBRRH=0;
  ac:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  ae:	ba b9       	out	0x0a, r27	; 10
 UCSRC=0x8e;
  b0:	a0 bd       	out	0x20, r26	; 32
	UDR=send;
	}

	char rec(void)
	{
	 while ((UCSRA & 0x80)==0);
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x20>
	 return UDR;
  b6:	8c b1       	in	r24, 0x0c	; 12
while(1)
{
char a[11]={'R','B','F','L','S'};
ini();
a[x]=rec();
if(a[x]=='F')
  b8:	86 34       	cpi	r24, 0x46	; 70
  ba:	49 f4       	brne	.+18     	; 0xce <main+0x3c>
{
PORTC=0B00000101;
  bc:	45 bb       	out	0x15, r20	; 21
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	97 e2       	ldi	r25, 0x27	; 39
  c2:	f9 01       	movw	r30, r18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <main+0x30>
  cc:	ee cf       	rjmp	.-36     	; 0xaa <main+0x18>
_delay_ms(1000);
}
else if(a[x]=='B')
  ce:	82 34       	cpi	r24, 0x42	; 66
  d0:	49 f4       	brne	.+18     	; 0xe4 <main+0x52>
{
PORTC=0B00001010;
  d2:	55 bb       	out	0x15, r21	; 21
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	97 e2       	ldi	r25, 0x27	; 39
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x46>
  e2:	e3 cf       	rjmp	.-58     	; 0xaa <main+0x18>
_delay_ms(1000);
}
else if(a[x]=='L')
  e4:	8c 34       	cpi	r24, 0x4C	; 76
  e6:	49 f4       	brne	.+18     	; 0xfa <main+0x68>
{
PORTC=0B00001001;
  e8:	65 bb       	out	0x15, r22	; 21
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	97 e2       	ldi	r25, 0x27	; 39
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x5c>
  f8:	d8 cf       	rjmp	.-80     	; 0xaa <main+0x18>
_delay_ms(1000);
}
else if(a[x]=='R')
  fa:	82 35       	cpi	r24, 0x52	; 82
  fc:	49 f4       	brne	.+18     	; 0x110 <main+0x7e>
{
PORTC=0B00000110;
  fe:	75 bb       	out	0x15, r23	; 21
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	97 e2       	ldi	r25, 0x27	; 39
 104:	f9 01       	movw	r30, r18
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	d9 f7       	brne	.-10     	; 0x104 <main+0x72>
 10e:	cd cf       	rjmp	.-102    	; 0xaa <main+0x18>
_delay_ms(1000);
}
else if(a[x]=='S')
 110:	83 35       	cpi	r24, 0x53	; 83
 112:	09 f0       	breq	.+2      	; 0x116 <main+0x84>
 114:	ca cf       	rjmp	.-108    	; 0xaa <main+0x18>
{
PORTC=0x00;
 116:	15 ba       	out	0x15, r1	; 21
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	97 e2       	ldi	r25, 0x27	; 39
 11c:	f9 01       	movw	r30, r18
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <main+0x8a>
 126:	c1 cf       	rjmp	.-126    	; 0xaa <main+0x18>

00000128 <ini>:
}



void ini()
{
 128:	83 e3       	ldi	r24, 0x33	; 51
 12a:	89 b9       	out	0x09, r24	; 9
  UBRRL=51;
 UBRRH=0;
 12c:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
 132:	8e e8       	ldi	r24, 0x8E	; 142
 134:	80 bd       	out	0x20, r24	; 32
}
 136:	08 95       	ret

00000138 <send>:
  void send(char send)
  {
 138:	5d 9b       	sbis	0x0b, 5	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <send>
    while((UCSRA & 0x20)==0);
	UDR=send;
 13c:	8c b9       	out	0x0c, r24	; 12
	}
 13e:	08 95       	ret

00000140 <rec>:

	char rec(void)
	{
 140:	5f 9b       	sbis	0x0b, 7	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <rec>
	 while ((UCSRA & 0x80)==0);
	 return UDR;
 144:	8c b1       	in	r24, 0x0c	; 12
	 }
 146:	08 95       	ret

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
